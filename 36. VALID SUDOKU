class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int n=board.size();
        int row[9][9]={0};
        int column[9][9]={0};
        int box[9][9]={0};

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]!='.'){
                    int num = board[i][j]-'0';

                    int k = (i/3)*3+(j/3);
                    row[i][num-1]++;
                    column[j][num-1]++;
                    box[k][num-1]++;

                if(row[i][num-1]>1 || column[j][num-1]>1 || box[k][num-1]>1){
                    return false;
                }
                }
            }
        }
        return true;
    }
};


or



class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int n=board.size();
        int row[9][9]={0};
        int column[9][9]={0};
        int box[9][9]={0};

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]!='.'){
                    int num = board[i][j]-'0';

                    int k = (i/3)*3+(j/3);

                if(row[i][num-1]++ || column[j][num-1]++ || box[k][num-1]++){
                   
                    return false;
                }
                }
            }
        }
        return true;
    }
};
