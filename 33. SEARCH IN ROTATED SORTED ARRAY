class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int start=0;
        int end=n-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(nums[start]<=nums[mid]){
                if(nums[start]<=target && target<=nums[mid]){
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
            else{
                if(nums[mid]<=target && target<= nums[end]){
                    start=mid+1;
                }
                else{
                    end=mid-1;
                }
            }
        }
        return -1;
    }
};

//this is upgraded version of binary search in which we can find the element in sorted rotated array
// we first need to find the mid element using the formula then we need to check which side of middle element sub array is in sorted form since it is sorted array which is rotated one of the side will be sorted then 
we will apply binary search on the sorted sub array if the element is not present in the osrted sub array then we know that the element is present in unsorted side so we apply binary search on unsorted side
