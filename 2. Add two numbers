/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// two nodes are given representing two diff numbers in reverse order we need to add them and return in same reverse order 
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* l3 = new ListNode(0);
        int carry=0;
        ListNode *head =l3;
        while(l1 && l2){
            int value=l1->val+l2->val+carry;
            carry=value/10; // to calculate carry ,always take carry as int
            l3->next = new ListNode(value%10);   // here value%10 is the actual number we are adding to final linked list
            l1=l1->next;
            l2=l2->next;
            l3=l3->next;
        }
        while(l1){
            int value=l1->val+carry;
            carry=value/10;
            l3->next = new ListNode(value%10);
            l1=l1->next;
            l3=l3->next;
        }
        while(l2){
            int value=l2->val+carry;
            carry=value/10;
            l3->next = new ListNode(value%10);
            l2=l2->next;
            l3=l3->next;
        }
        if(carry){
            l3->next=new ListNode(carry); // if any carry is present after all the operation add it to end
        }
        return head->next;
    }
};
